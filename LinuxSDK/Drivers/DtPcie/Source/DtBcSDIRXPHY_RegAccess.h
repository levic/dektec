//*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#* DtBcSDIRXPHY_RegAccess.h *#*#*#*#*#*#*#* (C) 2019 DekTec
//
// Device driver - SdiRxPhy v1 (SDIRXPHY) - Register access functions
//
// The register access functions defined here are elementary inline functions to read
// from and write to registers of BB2.0 building block SdiRxPhy.
// These functions should solely be used by the block controller for SdiRxPhy.
//
// 2019.04.26 10:57 - AUTOGENERATED BY DtBlock - DO NOT EDIT THIS FILE BY HAND

//.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- License -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-

// Copyright (C) 2019 DekTec Digital Video B.V.
//
// Redistribution and use in source and binary forms, with or without modification, are
// permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this list
//     of conditions and the following disclaimer.
//  2. Redistributions in binary format must reproduce the above copyright notice, this
//     list of conditions and the following disclaimer in the documentation.
//
// THIS SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL DEKTEC DIGITAL VIDEO BV, ITS AGENTS OR ITS EMPLOYEES BE LIABLE FOR
// ANY DIRECT, INDIRECT, CONSEQUENTIAL, INCIDENTAL, OR OTHER DAMAGES (INCLUDING DAMAGES
// FOR THE LOSS OF USE, INFORMATION, GOODWILL, PROFIT, WORK STOPPAGE, DATA, BUSINESS OR
// REVENUE) UNDER ANY CIRCUMSTANCES, OR UNDER ANY LEGAL THEORY, WHETHER IN CONTRACT, IN
// TORT, IN NEGLIGENCE, OR OTHERWISE, ARISING FROM THE USE OF, OR INABILITY TO USE THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

//+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=
//+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+ EXAMPLES +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
//+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=
//
// 1. Getting fields 'DeviceFamily' and 'MaxSdiRate' from register 'Config':
//      UInt32  Reg_Config, DeviceFamily, MaxSdiRate;
//      Reg_Config   = SDIRXPHY_Config_READ(pBc);
//      DeviceFamily = SDIRXPHY_Config_GET_DeviceFamily(Reg_Config);
//      MaxSdiRate   = SDIRXPHY_Config_GET_MaxSdiRate(Reg_Config);
//
// 2. Single-function shorthand for reading field 'Load' from register 'CdcFifoStatus':
//      UInt32  Load = SDIRXPHY_CdcFifoStatus_READ_Load(pBc);
//
//+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+ NOTES +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=
//
// A) No automatic caching is provided, the user has to manage a 'cache' of 32-bit
// register values himself. The number of register reads and writes shall be minimized,
// as these are extremely slow (hundreds of CPU cycles for PCIe bus and orders of
// magnitude longer for USB).
//
// B) To read a field, the register shall first be read into an UInt32 using a READ
// function, followed by getting the field from the UInt32 value with a GET function.
// Field READ functions (a combination of the register READ- and field GET function) are
// provided for convenience, but these should only be used if the register value is just
// needed once for getting a single field.
//
// C) No register-access functions are generated for the BlockId register at address 0,
// nor for interrupt-status registers. The driver has generic (BB-independent) functions
// available for accessing these registers.

//=+=+=+=+=+=+=+=+=+=+=+ List of Generated Register-Access Functions +=+=+=+=+=+=+=+=+=+=+

// SDIRXPHY_C10A10_CdrPllSettings4_GET_LfResistorPd
// SDIRXPHY_C10A10_CdrPllSettings4_GET_Reserved0
// SDIRXPHY_C10A10_CdrPllSettings4_GET_Reserved1
// SDIRXPHY_C10A10_CdrPllSettings4_READ
// SDIRXPHY_C10A10_CdrPllSettings4_SET_LfResistorPd
// SDIRXPHY_C10A10_CdrPllSettings4_SET_Reserved0
// SDIRXPHY_C10A10_CdrPllSettings4_SET_Reserved1
// SDIRXPHY_C10A10_CdrPllSettings4_WRITE
// SDIRXPHY_C10A10_CdrPllSettings9_GET_PdLCounter
// SDIRXPHY_C10A10_CdrPllSettings9_GET_Reserved2
// SDIRXPHY_C10A10_CdrPllSettings9_GET_Reserved3
// SDIRXPHY_C10A10_CdrPllSettings9_READ
// SDIRXPHY_C10A10_CdrPllSettings9_SET_PdLCounter
// SDIRXPHY_C10A10_CdrPllSettings9_SET_Reserved2
// SDIRXPHY_C10A10_CdrPllSettings9_SET_Reserved3
// SDIRXPHY_C10A10_CdrPllSettings9_WRITE
// SDIRXPHY_CdcFifoStatus_CLEAR_Overflow
// SDIRXPHY_CdcFifoStatus_GET_Load
// SDIRXPHY_CdcFifoStatus_GET_Overflow
// SDIRXPHY_CdcFifoStatus_READ
// SDIRXPHY_CdcFifoStatus_READ_Load
// SDIRXPHY_CdcFifoStatus_READ_Overflow
// SDIRXPHY_Config_GET_DeviceFamily
// SDIRXPHY_Config_GET_MaxSdiRate
// SDIRXPHY_Config_READ
// SDIRXPHY_Config_READ_DeviceFamily
// SDIRXPHY_Config_READ_MaxSdiRate
// SDIRXPHY_Control_READ
// SDIRXPHY_Control_SET_BlockEnable
// SDIRXPHY_Control_SET_LockMode
// SDIRXPHY_Control_SET_OperationalMode
// SDIRXPHY_Control_SET_PllReset
// SDIRXPHY_Control_SET_RxClkReset
// SDIRXPHY_Control_SET_SrcFactor
// SDIRXPHY_Control_WRITE
// SDIRXPHY_Status_GET_CarrierDetect
// SDIRXPHY_Status_GET_LockedToData
// SDIRXPHY_Status_GET_LockedToRef
// SDIRXPHY_Status_GET_NumEdgesDetected
// SDIRXPHY_Status_GET_ResetInProgress
// SDIRXPHY_Status_READ
// SDIRXPHY_Status_READ_CarrierDetect
// SDIRXPHY_Status_READ_LockedToData
// SDIRXPHY_Status_READ_LockedToRef
// SDIRXPHY_Status_READ_NumEdgesDetected
// SDIRXPHY_Status_READ_ResetInProgress

//+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+ Include Files +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=

#include "DtBc.h"                     // Block controller structs and functions

//+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+ Constant Definitions +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+

// Value map 'BlockEnable'
#define SDIRXPHY_BLKENA_DISABLED        0x0  // Block is entirely disabled
#define SDIRXPHY_BLKENA_ENABLED         0x1  // Block is enabled and processes data

// Value map 'SdiSrcFactor'
#define SDIRXPHY_SDIMODE_BYPASS         0x0  // No up/down-sampling (x1)
#define SDIRXPHY_SDIMODE_x2             0x1  // x2 up/down-sampling
#define SDIRXPHY_SDIMODE_x11            0x2  // x11 up/down sampling

// Value map 'SdiRate'
#define SDIRXPHY_SDIMODE_SD             0x0  // SDI mode is SD-SDI
#define SDIRXPHY_SDIMODE_HD             0x1  // SDI mode is HD-SDI
#define SDIRXPHY_SDIMODE_3G             0x2  // SDI mode is 3G-SDI
#define SDIRXPHY_SDIMODE_6G             0x3  // SDI mode is 6G-SDI
#define SDIRXPHY_SDIMODE_12G            0x4  // SDI mode is 12G-SDI

// Value map 'OperationalMode'
#define SDIRXPHY_OPMODE_IDLE            0x0  // Block is inactive
#define SDIRXPHY_OPMODE_STANDBY         0x1  // Block is partially operational
#define SDIRXPHY_OPMODE_RUN             0x2  // Block performs its normal function

// Value map 'DeviceFamily'
#define SDIRXPHY_FAMILY_CV              0x0  // Intel Cyclone V
#define SDIRXPHY_FAMILY_C10             0x1  // Intel Cyclone 10
#define SDIRXPHY_FAMILY_A10             0x2  // Intel Arria 10

// Value map 'LCounter'
#define SDIRXPHY_LCOUNTER_DIV_BY_4      0x4  // Count, or divide by, 4
#define SDIRXPHY_LCOUNTER_DIV_BY_8      0x5  // Count, or divide by, 8

// Value map 'LfPd'
#define SDIRXPHY_LFPD_SETTING_0         0x0  // lf_pd_setting0 - used for HD rate
#define SDIRXPHY_LFPD_SETTING_3         0x3  // lf_pd_setting3 - used for 3G rate

// Value map 'LockMode'
#define SDIRXPHY_LOCKMODE_LOCK_TO_DATA  0x0  // Lock-to-Data
#define SDIRXPHY_LOCKMODE_LOCK_TO_REF   0x1  // Lock-to-Reference

//+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=
//=+=+=+=+=+=+=+=+=+=+=+ REGISTER-ACCESS FUNCTIONS - IMPLEMENTATION +=+=+=+=+=+=+=+=+=+=+=
//+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=

//-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- Register 'Config' -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.

// Register READ function
static __inline UInt32  SDIRXPHY_Config_READ(DtBcSDIRXPHY* pBc)
{
    return DtBc_RegRead32((DtBc*)pBc, 0x4);
}

// Field GET functions
static __inline UInt32  SDIRXPHY_Config_GET_DeviceFamily(UInt32 Config)
{
    return Config & 0xF;
}
static __inline UInt32  SDIRXPHY_Config_GET_MaxSdiRate(UInt32 Config)
{
    return (Config & 0x70) >> 4;
}

// Field READ functions
static __inline UInt32  SDIRXPHY_Config_READ_DeviceFamily(DtBcSDIRXPHY* pBc)
{
    return DtBc_RegRead32((DtBc*)pBc, 0x4) & 0xF;
}
static __inline UInt32  SDIRXPHY_Config_READ_MaxSdiRate(DtBcSDIRXPHY* pBc)
{
    return (DtBc_RegRead32((DtBc*)pBc, 0x4) & 0x70) >> 4;
}

//.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- Register 'Control' -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.

// Register READ function
static __inline UInt32  SDIRXPHY_Control_READ(DtBcSDIRXPHY* pBc)
{
    return DtBc_RegRead32((DtBc*)pBc, 0x8);
}

// Field SET functions
static __inline UInt32  SDIRXPHY_Control_SET_BlockEnable(UInt32 Control, UInt32 BlockEnable)
{
    DT_ASSERT((BlockEnable & ~0x1) == 0);
    return (Control & ~0x1) | BlockEnable;
}
static __inline UInt32  SDIRXPHY_Control_SET_OperationalMode(UInt32 Control, UInt32 OperationalMode)
{
    DT_ASSERT((OperationalMode & ~0x3) == 0);
    return (Control & ~0x6) | (OperationalMode << 1);
}
static __inline UInt32  SDIRXPHY_Control_SET_RxClkReset(UInt32 Control, UInt32 RxClkReset)
{
    DT_ASSERT((RxClkReset & ~0x1) == 0);
    return (Control & ~0x8) | (RxClkReset << 3);
}
static __inline UInt32  SDIRXPHY_Control_SET_PllReset(UInt32 Control, UInt32 PllReset)
{
    DT_ASSERT((PllReset & ~0x1) == 0);
    return (Control & ~0x10) | (PllReset << 4);
}
static __inline UInt32  SDIRXPHY_Control_SET_LockMode(UInt32 Control, UInt32 LockMode)
{
    DT_ASSERT((LockMode & ~0x1) == 0);
    return (Control & ~0x20) | (LockMode << 5);
}
static __inline UInt32  SDIRXPHY_Control_SET_SrcFactor(UInt32 Control, UInt32 SrcFactor)
{
    DT_ASSERT((SrcFactor & ~0xF) == 0);
    return (Control & ~0x3C0) | (SrcFactor << 6);
}

// Register WRITE function
static __inline void  SDIRXPHY_Control_WRITE(DtBcSDIRXPHY* pBc, UInt32 Control)
{
    DtBc_RegWrite32((DtBc*)pBc, 0x8, Control);
}

//-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- Register 'Status' -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.

// Register READ function
static __inline UInt32  SDIRXPHY_Status_READ(DtBcSDIRXPHY* pBc)
{
    return DtBc_RegRead32((DtBc*)pBc, 0xC);
}

// Field GET functions
static __inline UInt32  SDIRXPHY_Status_GET_ResetInProgress(UInt32 Status)
{
    return Status & 0x1;
}
static __inline UInt32  SDIRXPHY_Status_GET_LockedToRef(UInt32 Status)
{
    return (Status & 0x2) >> 1;
}
static __inline UInt32  SDIRXPHY_Status_GET_LockedToData(UInt32 Status)
{
    return (Status & 0x4) >> 2;
}
static __inline UInt32  SDIRXPHY_Status_GET_CarrierDetect(UInt32 Status)
{
    return (Status & 0x8) >> 3;
}
static __inline UInt32  SDIRXPHY_Status_GET_NumEdgesDetected(UInt32 Status)
{
    return (Status & 0x3FFFF00) >> 8;
}

// Field READ functions
static __inline UInt32  SDIRXPHY_Status_READ_ResetInProgress(DtBcSDIRXPHY* pBc)
{
    return DtBc_RegRead32((DtBc*)pBc, 0xC) & 0x1;
}
static __inline UInt32  SDIRXPHY_Status_READ_LockedToRef(DtBcSDIRXPHY* pBc)
{
    return (DtBc_RegRead32((DtBc*)pBc, 0xC) & 0x2) >> 1;
}
static __inline UInt32  SDIRXPHY_Status_READ_LockedToData(DtBcSDIRXPHY* pBc)
{
    return (DtBc_RegRead32((DtBc*)pBc, 0xC) & 0x4) >> 2;
}
static __inline UInt32  SDIRXPHY_Status_READ_CarrierDetect(DtBcSDIRXPHY* pBc)
{
    return (DtBc_RegRead32((DtBc*)pBc, 0xC) & 0x8) >> 3;
}
static __inline UInt32  SDIRXPHY_Status_READ_NumEdgesDetected(DtBcSDIRXPHY* pBc)
{
    return (DtBc_RegRead32((DtBc*)pBc, 0xC) & 0x3FFFF00) >> 8;
}

//-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- Register 'CdcFifoStatus' -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-

// Register READ function
static __inline UInt32  SDIRXPHY_CdcFifoStatus_READ(DtBcSDIRXPHY* pBc)
{
    return DtBc_RegRead32((DtBc*)pBc, 0x10);
}

// Field GET functions
static __inline UInt32  SDIRXPHY_CdcFifoStatus_GET_Overflow(UInt32 CdcFifoStatus)
{
    return CdcFifoStatus & 0x1;
}
static __inline UInt32  SDIRXPHY_CdcFifoStatus_GET_Load(UInt32 CdcFifoStatus)
{
    return (CdcFifoStatus & 0xFF00) >> 8;
}

// Field READ functions
static __inline UInt32  SDIRXPHY_CdcFifoStatus_READ_Overflow(DtBcSDIRXPHY* pBc)
{
    return DtBc_RegRead32((DtBc*)pBc, 0x10) & 0x1;
}
static __inline UInt32  SDIRXPHY_CdcFifoStatus_READ_Load(DtBcSDIRXPHY* pBc)
{
    return (DtBc_RegRead32((DtBc*)pBc, 0x10) & 0xFF00) >> 8;
}

// Field CLEAR function
static __inline void  SDIRXPHY_CdcFifoStatus_CLEAR_Overflow(DtBcSDIRXPHY* pBc)
{
    UInt32  CdcFifoStatus = DtBc_RegRead32((DtBc*)pBc, 0x10);
    DtBc_RegWrite32((DtBc*)pBc, 0x10, CdcFifoStatus | 0x1);
}

//.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- Register 'CdrPllSettings4' -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.

// Register READ function
static __inline UInt32  SDIRXPHY_C10A10_CdrPllSettings4_READ(DtBcSDIRXPHY* pBc)
{
    return DtBc_RegRead32((DtBc*)pBc, 0x80);
}

// Field GET functions
static __inline UInt32  SDIRXPHY_C10A10_CdrPllSettings4_GET_Reserved0(UInt32 CdrPllSettings4)
{
    return CdrPllSettings4 & 0x3;
}
static __inline UInt32  SDIRXPHY_C10A10_CdrPllSettings4_GET_LfResistorPd(UInt32 CdrPllSettings4)
{
    return (CdrPllSettings4 & 0xC) >> 2;
}
static __inline UInt32  SDIRXPHY_C10A10_CdrPllSettings4_GET_Reserved1(UInt32 CdrPllSettings4)
{
    return (CdrPllSettings4 & 0xF0) >> 4;
}

// Field SET functions
static __inline UInt32  SDIRXPHY_C10A10_CdrPllSettings4_SET_Reserved0(UInt32 CdrPllSettings4, UInt32 Reserved0)
{
    DT_ASSERT((Reserved0 & ~0x3) == 0);
    return (CdrPllSettings4 & ~0x3) | Reserved0;
}
static __inline UInt32  SDIRXPHY_C10A10_CdrPllSettings4_SET_LfResistorPd(UInt32 CdrPllSettings4, UInt32 LfResistorPd)
{
    DT_ASSERT((LfResistorPd & ~0x3) == 0);
    return (CdrPllSettings4 & ~0xC) | (LfResistorPd << 2);
}
static __inline UInt32  SDIRXPHY_C10A10_CdrPllSettings4_SET_Reserved1(UInt32 CdrPllSettings4, UInt32 Reserved1)
{
    DT_ASSERT((Reserved1 & ~0xF) == 0);
    return (CdrPllSettings4 & ~0xF0) | (Reserved1 << 4);
}

// Register WRITE function
static __inline void  SDIRXPHY_C10A10_CdrPllSettings4_WRITE(DtBcSDIRXPHY* pBc, UInt32 CdrPllSettings4)
{
    DtBc_RegWrite32((DtBc*)pBc, 0x80, CdrPllSettings4);
}

//.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- Register 'CdrPllSettings9' -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.

// Register READ function
static __inline UInt32  SDIRXPHY_C10A10_CdrPllSettings9_READ(DtBcSDIRXPHY* pBc)
{
    return DtBc_RegRead32((DtBc*)pBc, 0x84);
}

// Field GET functions
static __inline UInt32  SDIRXPHY_C10A10_CdrPllSettings9_GET_Reserved2(UInt32 CdrPllSettings9)
{
    return CdrPllSettings9 & 0x7;
}
static __inline UInt32  SDIRXPHY_C10A10_CdrPllSettings9_GET_PdLCounter(UInt32 CdrPllSettings9)
{
    return (CdrPllSettings9 & 0x38) >> 3;
}
static __inline UInt32  SDIRXPHY_C10A10_CdrPllSettings9_GET_Reserved3(UInt32 CdrPllSettings9)
{
    return (CdrPllSettings9 & 0xC0) >> 6;
}

// Field SET functions
static __inline UInt32  SDIRXPHY_C10A10_CdrPllSettings9_SET_Reserved2(UInt32 CdrPllSettings9, UInt32 Reserved2)
{
    DT_ASSERT((Reserved2 & ~0x7) == 0);
    return (CdrPllSettings9 & ~0x7) | Reserved2;
}
static __inline UInt32  SDIRXPHY_C10A10_CdrPllSettings9_SET_PdLCounter(UInt32 CdrPllSettings9, UInt32 PdLCounter)
{
    DT_ASSERT((PdLCounter & ~0x7) == 0);
    return (CdrPllSettings9 & ~0x38) | (PdLCounter << 3);
}
static __inline UInt32  SDIRXPHY_C10A10_CdrPllSettings9_SET_Reserved3(UInt32 CdrPllSettings9, UInt32 Reserved3)
{
    DT_ASSERT((Reserved3 & ~0x3) == 0);
    return (CdrPllSettings9 & ~0xC0) | (Reserved3 << 6);
}

// Register WRITE function
static __inline void  SDIRXPHY_C10A10_CdrPllSettings9_WRITE(DtBcSDIRXPHY* pBc, UInt32 CdrPllSettings9)
{
    DtBc_RegWrite32((DtBc*)pBc, 0x84, CdrPllSettings9);
}